# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KfPubfR6MbTXeoZJPHFibOwsbYaXjC2L
"""

from google.colab import files
uploaded = files.upload()

!pip install transformers

!pip install transformers[sentencepiece]

import pandas as pd

filename = "QAG_H4.csv"

df = pd.read_csv(filename)
df.rename(columns = {'question':'question', 'prompt':'prompt', 'context':'context'}, inplace = True)
df.keys()

import pandas as pd

filename = "QAG_H4.csv"

df = pd.read_csv(filename)
df.rename(columns = {'question':'question', 'context_prompt':'context_prompt'}, inplace = True)
df.keys()

from transformers import PegasusForConditionalGeneration, PegasusTokenizer, Trainer, TrainingArguments
import torch
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM


class PegasusDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels
    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels['input_ids'][idx])  # torch.tensor(self.labels[idx])
        return item
    def __len__(self):
        return len(self.labels['input_ids'])  # len(self.labels)

      
def prepare_data(model_name, 
                 train_question, train_context_prompt):
  """
  Prepare input data for model fine-tuning
  """
  tokenizer = AutoTokenizer.from_pretrained(model_name)

  #prepare_val = False if val_texts is None or val_labels is None else True
  #prepare_test = False if test_texts is None or test_labels is None else True

  def tokenize_data(train_question, train_context_prompt):
    encodings = tokenizer(train_context_prompt, truncation=True, padding=True, max_length = 512)
    #encodings2 = encode(train_prompt, truncation=True, padding=True, max_length = 512)
    #print(type(encodings1),type(encodings2))
    decodings = tokenizer(train_question, truncation=True, padding=True, max_length = 512)
    dataset_tokenized = PegasusDataset(encodings, decodings)
    return dataset_tokenized

  train_dataset = tokenize_data(train_question, train_context_prompt)
  #val_dataset = tokenize_data(val_texts, val_labels) if prepare_val else None
  #test_dataset = tokenize_data(test_texts, test_labels) if prepare_test else None

  return train_dataset, tokenizer


def prepare_fine_tuning(model_name, tokenizer, train_dataset, val_dataset=None, freeze_encoder=False, output_dir='./results'):
  """
  Prepare configurations and base model for fine-tuning
  """
  torch_device = 'cuda' if torch.cuda.is_available() else 'cpu'
  model = PegasusForConditionalGeneration.from_pretrained(model_name).to(torch_device)

  if freeze_encoder:
    for param in model.model.encoder.parameters():
      param.requires_grad = False

  if val_dataset is not None:
    training_args = TrainingArguments(
      output_dir=output_dir,           # output directory
      num_train_epochs=8,           # total number of training epochs
      per_device_train_batch_size=1,   # batch size per device during training, can increase if memory allows
      per_device_eval_batch_size=1,    # batch size for evaluation, can increase if memory allows
      save_steps=500,                  # number of updates steps before checkpoint saves
      save_total_limit=5,              # limit the total amount of checkpoints and deletes the older checkpoints
      evaluation_strategy='steps',     # evaluation strategy to adopt during training
      eval_steps=100,                  # number of update steps before evaluation
      warmup_steps=500,                # number of warmup steps for learning rate scheduler
      weight_decay=0.01,               # strength of weight decay
      logging_dir='./logs',            # directory for storing logs
      logging_steps=100,
    )

    trainer = Trainer(
      model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
      args=training_args,                  # training arguments, defined above
      train_dataset=train_dataset,         # training dataset
      eval_dataset=val_dataset,            # evaluation dataset
      tokenizer=tokenizer
    )

  else:
    training_args = TrainingArguments(
      output_dir=output_dir,           # output directory
      num_train_epochs=8,           # total number of training epochs
      per_device_train_batch_size=1,   # batch size per device during training, can increase if memory allows
      save_steps=500,                  # number of updates steps before checkpoint saves
      save_total_limit=5,              # limit the total amount of checkpoints and deletes the older checkpoints
      warmup_steps=500,                # number of warmup steps for learning rate scheduler
      weight_decay=0.01,               # strength of weight decay
      logging_dir='./logs',            # directory for storing logs
      logging_steps=100,
    )

    trainer = Trainer(
      model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
      args=training_args,                  # training arguments, defined above
      train_dataset=train_dataset,         # training dataset
      tokenizer=tokenizer
    )

  return trainer

train_question,train_context_prompt = (list(df['question'])), (list(df['context_prompt']))
  
model_name = 'facebook/mbart-large-50'
train_dataset, tokenizer = prepare_data(model_name, train_question, train_context_prompt)
trainer = prepare_fine_tuning(model_name, tokenizer, train_dataset)
trainer.train()

import os
if not os.path.exists('./ouput_model/'):
    os.makedirs('./ouput_model/')
trainer.model.save_pretrained("./ouput_model/")

#!zip -r ouput_model.zip ./ouput_model/

from google.colab import files
files.download('/content/ouput_model')